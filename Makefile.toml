# KairosDB-rs Task Runner Configuration
# Install cargo-make with: cargo install cargo-make
# Run tasks with: cargo make <task-name>

[config]
default_to_workspace = false
min_version = "0.35.0"

[env]
# Default environment variables
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[tasks.default]
alias = "ci"

# === Development Tasks ===

[tasks.dev-setup]
description = "Set up development environment"
script = '''
echo "üîß Setting up development environment..."
echo "Installing cargo-make (if not already installed)..."
cargo install cargo-make --force
echo "Installing nextest (if not already installed)..."
cargo install cargo-nextest --force
echo "Installing llvm-cov (if not already installed)..."
cargo install cargo-llvm-cov --force
echo "‚úÖ Development environment ready!"
'''

[tasks.format]
description = "Format all code"
command = "cargo"
args = ["fmt", "--all"]

[tasks.format-check]
description = "Check code formatting"
command = "cargo"
args = ["fmt", "--all", "--check"]

[tasks.lint]
description = "Run clippy lints"
command = "cargo"
args = ["clippy", "--all-targets", "--all-features", "--", "-D", "warnings"]

[tasks.build]
description = "Build all workspace members"
command = "cargo"
args = ["build", "--all"]

[tasks.build-release]
description = "Build all workspace members in release mode"
command = "cargo"
args = ["build", "--release", "--all"]

# === Testing Tasks ===

[tasks.test]
clear = true
description = "Run unit tests only"
script = '''
mkdir -p target/nextest/ci
cargo nextest run --profile ci --workspace --lib --no-fail-fast --target-dir target/nextest/ci
'''

[tasks.test-integration]
clear = true
description = "Run integration tests (requires Tilt environment)"
env = { KAIROSDB_CASSANDRA_CONTACT_POINTS = "localhost:9042" }
script = '''
mkdir -p target/nextest/ci
cargo nextest run --profile ci --workspace --run-ignored ignored-only --no-fail-fast --target-dir target/nextest/ci
if [ -f "target/nextest/ci/junit.xml" ]; then mv target/nextest/ci/junit.xml target/nextest/ci/junit-integration.xml; fi
'''

[tasks.test-all]
clear = true
description = "Run all tests"
script = '''
echo "üß™ Running unit tests..."
mkdir -p target/nextest/ci
cargo nextest run --profile ci --workspace --lib --no-fail-fast --target-dir target/nextest/ci
echo "üîç Running integration tests (requires Tilt)..."
KAIROSDB_CASSANDRA_CONTACT_POINTS=localhost:9042 cargo nextest run --profile ci --workspace --run-ignored ignored-only --no-fail-fast --target-dir target/nextest/ci
if [ -f "target/nextest/ci/junit.xml" ]; then mv target/nextest/ci/junit.xml target/nextest/ci/junit-integration.xml; fi
'''

[tasks.coverage-report]
description = "Generate test coverage report"
script = '''
echo "üìä Generating coverage report..."
mkdir -p target/nextest/ci target/llvm-cov-target
cargo llvm-cov nextest --profile ci --workspace --lib --no-fail-fast --cobertura --output-path target/llvm-cov-target/cobertura.xml --target-dir target/nextest/ci
echo "Coverage report generated at: target/llvm-cov-target/cobertura.xml"
echo "JUnit report generated at: target/nextest/ci/junit.xml"
'''

[tasks.coverage-integration]
description = "Generate coverage report for integration tests"
env = { KAIROSDB_CASSANDRA_CONTACT_POINTS = "localhost:9042" }
script = '''
echo "üìä Generating integration test coverage..."
mkdir -p target/nextest/ci target/llvm-cov-target
cargo llvm-cov nextest --profile ci --workspace --run-ignored ignored-only --no-fail-fast --cobertura --output-path target/llvm-cov-target/integration-cobertura.xml --target-dir target/nextest/ci
if [ -f "target/nextest/ci/junit.xml" ]; then mv target/nextest/ci/junit.xml target/nextest/ci/junit-integration.xml; fi
echo "Integration coverage report generated at: target/llvm-cov-target/integration-cobertura.xml"
echo "JUnit report generated at: target/nextest/ci/junit-integration.xml"
'''

# === Quality Assurance Tasks ===

[tasks.check]
description = "Run all code quality checks (format, lint, build)"
dependencies = ["format-check", "lint", "build"]

[tasks.pre-commit]
description = "Run all pre-commit checks"
dependencies = ["format", "lint", "test"]

[tasks.ci]
description = "Run complete CI pipeline locally (equivalent to Jenkins)"
script = '''
echo "üöÄ Running complete CI pipeline..."
echo ""

# Track exit codes
FORMAT_EXIT=0
LINT_EXIT=0  
BUILD_EXIT=0
TEST_EXIT=0

echo "üìù Step 1: Format check..."
cargo make format-check || FORMAT_EXIT=$?
echo ""

echo "üîç Step 2: Lint check..."
cargo make lint || LINT_EXIT=$?
echo ""

echo "üèóÔ∏è  Step 3: Build..."
cargo make build || BUILD_EXIT=$?
echo ""

echo "üß™ Step 4: Unit tests..."
cargo make test || TEST_EXIT=$?
echo ""

# Report results
if [ $FORMAT_EXIT -eq 0 ] && [ $LINT_EXIT -eq 0 ] && [ $BUILD_EXIT -eq 0 ] && [ $TEST_EXIT -eq 0 ]; then
    echo "‚úÖ CI pipeline completed successfully!"
else
    echo "‚ùå CI pipeline failed with issues:"
    [ $FORMAT_EXIT -ne 0 ] && echo "  - Format check failed"
    [ $LINT_EXIT -ne 0 ] && echo "  - Lint check failed"  
    [ $BUILD_EXIT -ne 0 ] && echo "  - Build failed"
    [ $TEST_EXIT -ne 0 ] && echo "  - Unit tests failed"
    exit 1
fi

echo ""
echo "‚ÑπÔ∏è  Note: Integration tests require Tilt environment"
echo "   Run 'cargo make test-integration' when Tilt is running"
'''

[tasks.ci-full]
description = "Run complete CI with integration tests (requires Tilt)"
script = '''
echo "üöÄ Running complete CI pipeline with integration tests..."
echo ""

# Track exit codes
FORMAT_EXIT=0
LINT_EXIT=0  
BUILD_EXIT=0
TEST_EXIT=0
INTEGRATION_EXIT=0
COVERAGE_EXIT=0

echo "üìù Step 1: Format check..."
cargo make format-check || FORMAT_EXIT=$?
echo ""

echo "üîç Step 2: Lint check..."
cargo make lint || LINT_EXIT=$?
echo ""

echo "üèóÔ∏è  Step 3: Build..."
cargo make build || BUILD_EXIT=$?
echo ""

echo "üß™ Step 4: Unit tests..."
cargo make test || TEST_EXIT=$?
echo ""

echo "üåê Step 5: Integration tests (requires Tilt)..."
cargo make test-integration || INTEGRATION_EXIT=$?
echo ""

echo "üìä Step 6: Coverage report..."
cargo make coverage-report || COVERAGE_EXIT=$?
echo ""

# Report results
if [ $FORMAT_EXIT -eq 0 ] && [ $LINT_EXIT -eq 0 ] && [ $BUILD_EXIT -eq 0 ] && [ $TEST_EXIT -eq 0 ] && [ $INTEGRATION_EXIT -eq 0 ] && [ $COVERAGE_EXIT -eq 0 ]; then
    echo "‚úÖ Full CI pipeline completed successfully!"
else
    echo "‚ùå CI pipeline failed with issues:"
    [ $FORMAT_EXIT -ne 0 ] && echo "  - Format check failed"
    [ $LINT_EXIT -ne 0 ] && echo "  - Lint check failed"  
    [ $BUILD_EXIT -ne 0 ] && echo "  - Build failed"
    [ $TEST_EXIT -ne 0 ] && echo "  - Unit tests failed"
    [ $INTEGRATION_EXIT -ne 0 ] && echo "  - Integration tests failed"
    [ $COVERAGE_EXIT -ne 0 ] && echo "  - Coverage generation failed"
    exit 1
fi
'''

# === Service Tasks ===

[tasks.run-ingest]
description = "Run the ingest service"
cwd = "kairosdb-ingest"
command = "cargo"
args = ["run", "--bin", "kairosdb-ingest"]

[tasks.run-query]
description = "Run the query service"
cwd = "kairosdb-query"
command = "cargo"
args = ["run", "--bin", "kairosdb-query"]

[tasks.run-ingest-release]
description = "Run the ingest service (release mode)"
cwd = "kairosdb-ingest"
command = "cargo"
args = ["run", "--release", "--bin", "kairosdb-ingest"]

[tasks.run-query-release]
description = "Run the query service (release mode)"
cwd = "kairosdb-query"
command = "cargo"
args = ["run", "--release", "--bin", "kairosdb-query"]

[tasks.run-datastore-demo]
description = "Run the datastore demo"
cwd = "kairosdb-core"
command = "cargo"
args = ["run", "--example", "datastore_demo"]

# === Benchmarking Tasks ===

[tasks.bench]
description = "Run performance benchmarks"
command = "cargo"
args = ["bench", "--workspace"]

[tasks.bench-ingestion]
description = "Run ingestion benchmarks"
command = "cargo"
args = ["bench", "--bench", "ingestion"]

# === Performance Testing Tasks ===

[tasks.perf-test]
description = "Run performance tests (requires Tilt environment)"
script = '''
echo "üöÄ Running performance test suite..."
cd tests && cargo run --release --bin perf_test -- --url http://localhost:8081 suite
'''

[tasks.perf-test-small]
description = "Run small performance test (quick validation)"
script = '''
echo "üèÉ Running small performance test..."
cd tests && cargo run --release --bin perf_test -- --url http://localhost:8081 run small_scale
'''

[tasks.perf-test-medium]
description = "Run medium performance test (CI-appropriate)"
script = '''
echo "üèÉ Running medium performance test..."
cd tests && cargo run --release --bin perf_test -- --url http://localhost:8081 run medium_scale
'''

[tasks.perf-test-large]
description = "Run large performance test (load testing)"
script = '''
echo "üöÄ Running large performance test..."
cd tests && cargo run --release --bin perf_test -- --url http://localhost:8081 run large_scale
'''

[tasks.perf-test-stress]
description = "Run stress test (find breaking points)"
script = '''
echo "üí™ Running stress performance test..."
cd tests && cargo run --release --bin perf_test -- --url http://localhost:8081 run stress_test
'''

[tasks.perf-monitor]
description = "Start continuous performance monitoring"
script = '''
echo "üëÅÔ∏è  Starting performance monitoring..."
cd tests && cargo run --bin perf_test -- --url http://localhost:8081 monitor --interval 300 --scenario medium_scale
'''

# === Clean Tasks ===

[tasks.clean]
description = "Clean build artifacts"
command = "cargo"
args = ["clean"]

[tasks.clean-all]
description = "Clean everything including cargo cache"
script = '''
cargo clean
rm -rf target/
echo "üßπ Cleaned all build artifacts"
'''

# === Docker Tasks ===

[tasks.docker-build]
description = "Build Docker images"
script = '''
echo "üê≥ Building Docker images..."
docker build -t kairosdb-ingest -f docker/Dockerfile.ingest .
docker build -t kairosdb-query -f docker/Dockerfile.query .
echo "‚úÖ Docker images built successfully"
'''

# === Help Task ===

[tasks.help]
description = "Show available tasks"
script = '''
echo "üìã Available KairosDB-rs tasks:"
echo ""
echo "üîß Development:"
echo "  dev-setup        - Set up development environment"
echo "  format          - Format all code"
echo "  format-check    - Check code formatting"
echo "  lint            - Run clippy lints"
echo "  build           - Build all workspace members"
echo "  build-release   - Build in release mode"
echo ""
echo "üß™ Testing:"
echo "  test            - Run unit tests only"
echo "  test-integration - Run integration tests (requires Tilt)"
echo "  test-all        - Run all tests"
echo "  coverage-report - Generate test coverage report"
echo ""
echo "‚úÖ Quality Assurance:"
echo "  check           - Run format, lint, and build checks"
echo "  pre-commit      - Run pre-commit checks"
echo "  ci              - Run complete CI pipeline (like Jenkins)"
echo "  ci-full         - Run CI with integration tests (requires Tilt)"
echo ""
echo "üöÄ Services:"
echo "  run-ingest      - Run the ingest service"
echo "  run-ingest-release - Run the ingest service (release mode)"
echo "  run-query       - Run the query service"
echo "  run-query-release - Run the query service (release mode)"
echo "  run-datastore-demo - Run the datastore demo"
echo ""
echo "üìä Benchmarking:"
echo "  bench           - Run all benchmarks"
echo "  bench-ingestion - Run ingestion benchmarks"
echo ""
echo "‚ö° Performance Testing:"
echo "  perf-test       - Run complete performance test suite"
echo "  perf-test-small - Run quick performance validation"
echo "  perf-test-medium - Run CI-appropriate performance test"
echo "  perf-test-large - Run load testing scenario"
echo "  perf-test-stress - Run stress test to find limits"
echo "  perf-monitor    - Start continuous monitoring"
echo ""
echo "üßπ Maintenance:"
echo "  clean           - Clean build artifacts"
echo "  clean-all       - Clean everything"
echo ""
echo "üê≥ Docker:"
echo "  docker-build    - Build Docker images"
echo ""
echo "üí° Most useful commands:"
echo "  cargo make ci          - Check if your build will pass CI"
echo "  cargo make pre-commit  - Run before committing"
echo "  cargo make ci-full     - Full CI with integration tests"
echo "  cargo make perf-test-small - Quick performance validation"
'''
