//! Test the current histogram format generated by our performance test

use kairosdb_e2e_tests::performance::generator::{GeneratorConfig, MetricDataGenerator};
use reqwest::Client;
use std::time::Duration;
use tracing::{error, info};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    let config = GeneratorConfig {
        metrics_count: 1,
        tag_combinations_per_metric: 1,
        histogram_samples_range: (10, 20),
        tag_cardinality_limit: 2,
    };

    let generator = MetricDataGenerator::new(config);
    let batches = generator.generate_batch(1).await;

    info!("Generated data format:");
    for batch in &batches {
        for datapoint in batch {
            info!("Datapoint: {}", serde_json::to_string_pretty(datapoint)?);
        }
    }

    // Test against Java KairosDB
    let client = Client::new();
    let java_url = "http://localhost:8080/api/v1/datapoints";

    // Also test with explicit type field
    if let Some(first_batch) = batches.first() {
        if let Some(first_dp) = first_batch.first() {
            let mut modified_dp = first_dp.clone();
            
            // Add explicit type field for histogram
            if let Some(obj) = modified_dp.as_object_mut() {
                obj.insert("type".to_string(), serde_json::Value::String("histogram".to_string()));
            }
            
            info!("Testing with explicit type field:");
            info!("Modified datapoint: {}", serde_json::to_string_pretty(&modified_dp)?);
            
            let response = client
                .post(java_url)
                .header("Content-Type", "application/json")
                .timeout(Duration::from_secs(5))
                .json(&vec![modified_dp])
                .send()
                .await?;

            let status = response.status();
            let response_text = response.text().await?;

            if status.is_success() {
                info!("✅ Java KairosDB accepted format WITH type field: {}", status);
                return Ok(());
            } else {
                error!("❌ Java KairosDB rejected format WITH type field: {}", status);
                error!("Response: {}", response_text);
            }
        }
    }

    if let Some(batch) = batches.first() {
        info!("Testing against Java KairosDB...");
        
        let response = client
            .post(java_url)
            .header("Content-Type", "application/json")
            .timeout(Duration::from_secs(5))
            .json(batch)
            .send()
            .await?;

        let status = response.status();
        let response_text = response.text().await?;

        if status.is_success() {
            info!("✅ Java KairosDB accepted the format: {}", status);
        } else {
            error!("❌ Java KairosDB rejected the format: {}", status);
            error!("Response: {}", response_text);
        }
    }

    Ok(())
}